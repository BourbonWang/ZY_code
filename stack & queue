type Stack []int

func (s *Stack) push(value int){
	*s = append(*s,value)
}

func (s *Stack) pop() int {
	n := len(*s)
	if n == 0{return -1}
	val := (*s)[n-1]
	*s = (*s)[:n-1]
	return val
}

func (s Stack)showTop()int{
	if len(s) == 0{return -1}
	return s[len(s) - 1]
}

func evalRPN(tokens []string) int {
	numStack := Stack{}
	for _,s := range tokens{
		if isNum(s){
			num,_ := strconv.Atoi(s)
			numStack.push(num)
		}else{
			a := numStack.pop()
			b := numStack.pop()
			var result int
			switch s {
			case "+":
				result = a + b
			case "-":
				result = b - a
			case "*":
				result = b * a
			case "/":
				result = b / a
				}
			numStack.push(result)
		}
	}
	return numStack.pop()
}

func isNum(s string) bool {
	if len(s) == 1 && s[0] < '0'{
		return false
	}
	return true
}

func decodeString(s string) string {
	var result string
	var stack []string
	var num	string
	for i,_ := range s{
		if s[i] >= '0' && s[i] <= '9'{ //num
			num += string(s[i])
		}else if s[i] == '['{ //[
			if len(result) > 0{ stack = append(stack,result) }
			stack = append(stack,num)
			stack = append(stack,"[")
			result = ""
			num = ""
		}else if s[i] == ']'{
			for{
				popstr := stack[len(stack)-1]
				stack = stack[:len(stack)-1]
				if popstr == "["{
					break
				}else{
					result = popstr + result
				}
			}
			popnum := stack[len(stack)-1]
			stack = stack[:len(stack)-1]
			n,_ := strconv.Atoi(popnum)
			loopstr := result
			for j := 0;j < n - 1;j++{
				result += loopstr
			}
			stack = append(stack,result)
			result = ""
		}else{
			result += string(s[i])
		}
	}

	for len(stack) > 0{
		popstr := stack[len(stack)-1]
		stack = stack[:len(stack)-1]
		result = popstr + result
	}
	return result
}

type Node struct {
	   Val int
	   Neighbors []*Node
}

var Nodemap map[*Node]*Node

func cloneGraph(node *Node) *Node {
	Nodemap = make(map[*Node]*Node)
	return dfsClone(node)
}

func dfsClone(node *Node) *Node {
	thisNode := &Node{Val:node.Val}
	Nodemap[node] = thisNode
	for _,n := range node.Neighbors{
		if Nodemap[n] == nil{
			newnode := dfsClone(n)
			Nodemap[n] = newnode
			thisNode.Neighbors = append(thisNode.Neighbors,newnode)
		}else{
			thisNode.Neighbors = append(thisNode.Neighbors,Nodemap[n])
		}
	}
	return thisNode
}

func numIslands(grid [][]byte) int {
	result := 0
	for i := 0;i < len(grid	);i++{
		for j := 0;j < len(grid[0]);j++{
			if grid[i][j] == 1{
				dfsIsland(grid,i,j)
				result++
			}
		}
	}
	return result
}

func dfsIsland(grid [][]byte,i int,j int) {
	if grid[i][j] == 0 {
		return
	}
	grid[i][j] = 0
	dfsIsland(grid, i-1, j)
	dfsIsland(grid, i+1, j)
	dfsIsland(grid, i, j-1)
	dfsIsland(grid, i, j+1)
}

func largestRectangleArea(heights []int) int {
	n := len(heights)
	left := make([]int,n)
	right := make([]int,n)
	for i,_ := range right{
		right[i] = n
	}
	stack := []int{}
	for i,_ := range heights{
		for len(stack) != 0 && heights[stack[len(stack)-1]] >= heights[i]{
			pop := stack[len(stack)-1]
			stack = stack[:len(stack)-1]
			right[pop] = i
		}
		if len(stack) == 0 {
			left[i] = -1
		}else{
			left[i] = stack[len(stack)-1]
		}
		stack = append(stack,i)
	}
	max := 0
	for i := 0;i < n;i++{
		if max < (right[i] - left[i] - 1) * heights[i]{
			max = (right[i] - left[i] - 1) * heights[i]
		}
	}
	return max
}

type MinStack struct{
	Val []int
	Min []int
}

func Constructor0() MinStack {
	return MinStack{}
}

func (this *MinStack) Push0(x int)  {
	this.Val = append(this.Val,x)
	min := this.GetMin0()
	if x < min {
		this.Min = append(this.Min,x)
	}else{
		this.Min = append(this.Min,min)
	}
}

func (this *MinStack) Pop0()  {
	n := len(this.Val)
	if n == 0 {return}
	this.Val = this.Val[:n]
	this.Min = this.Min[:n]
}

func (this *MinStack) Top0() int {
	n := len(this.Val)
	if n == 0 {return 0}
	return this.Val[n-1]
}

func (this *MinStack) GetMin0() int {
	return this.Min[len(this.Min)-1]
}

type MyQueue struct {
	Val []int
	Temp []int
}

/** Initialize your data structure here. */
func Constructor() MyQueue {
	return MyQueue{}
}

/** Push element x to the back of queue. */
func (this *MyQueue) Push(x int)  {
	this.Val = append(this.Val,x)
}

/** Removes the element from in front of queue and returns that element. */
func (this *MyQueue) Pop() int {
	if this.Empty(){return -1}
	for len(this.Val) > 0{
		x := this.Val[len(this.Val)-1]
		this.Val = this.Val[:len(this.Val)-1]
		this.Temp = append(this.Temp,x)
	}
	peekVal := this.Temp[len(this.Temp)-1]
	this.Temp = this.Temp[:len(this.Temp)-1]
	for len(this.Temp) > 0{
		x := this.Temp[len(this.Temp)-1]
		this.Temp = this.Temp[:len(this.Temp)-1]
		this.Val = append(this.Val,x)
	}
	return peekVal
}

/** Get the front element. */
func (this *MyQueue) Peek() int {
	if this.Empty(){return -1}
	for len(this.Val) > 0{
		x := this.Val[len(this.Val)-1]
		this.Val = this.Val[:len(this.Val)-1]
		this.Temp = append(this.Temp,x)
	}
	peekVal := this.Temp[len(this.Temp)-1]
	for len(this.Temp) > 0{
		x := this.Temp[len(this.Temp)-1]
		this.Temp = this.Temp[:len(this.Temp)-1]
		this.Val = append(this.Val,x)
	}
	return peekVal
}

/** Returns whether the queue is empty. */
func (this *MyQueue) Empty() bool {
	return len(this.Val) == 0
}

func updateMatrix(matrix [][]int) [][]int {
	m := len(matrix)
	n := len(matrix[0])
	queue := [][2]int{}
	result := make([][]int,m)
	for i,_ := range result{
		result[i] = make([]int,n)
	}
	for i := 0;i < m;i++{
		for j := 0;j < n;j++{
			if matrix[i][j] == 0{
				queue = append(queue,[2]int{i,j})
			}else{
				matrix[i][j] = -1
			}
		}
	}
	dir := [][]int{{1,0},{-1,0},{0,1},{0,-1}}
	for len(queue) > 0{
		i,j := queue[0][0], queue[0][1]
		queue = queue[1:]
		for _,d := range dir{
			x := i + d[0]
			y := j + d[1]
			if x >= 0 && x < m && y >= 0 && y < n && matrix[x][y] == -1{
				matrix[x][y] = matrix[i][j] + 1
				queue = append(queue,[2]int{x,y})
			}
		}
	}
	return matrix
}
