var table  [][]int
func longestIncreasingPath(matrix [][]int) int {
	m := len(matrix)
	if m == 0 {return 0}
	n := len(matrix[0])
	result := 1
	for i := 0;i < m;i++{
		for j := 0;j < n;j++{
			var val int
			if table[i][j] == 0{
				val = dfs(matrix,i,j)
			}else{
				val = table[i][j]
			}
			if result < val	{
				result = val
			}
		}
	}
	return result
}

func dfs(matrix [][]int,x int,y int) int {
	m := len(matrix)
	n := len(matrix[0])
	dir := [][]int{{0,1},{0,-1},{1,0},{-1,0}}
	result := 0
	for _,d := range dir{
		i := x + d[0]
		j := y + d[1]
		if i >= 0 && j >= 0 && i < m && j < n && matrix[i][j] > matrix[x][y]{
			var val int
			if table[i][j] == 0{
				val = dfs(matrix,i,j)
			}else{
				val = table[i][j]
			}
			if result < val {
				result = val
			}
		}
	}
	table[x][y] = result+1
	return result + 1
}

func minimumTotal(triangle [][]int) int {
	n := len(triangle)
	m := len(triangle[n-1])
	dp := make([]int,m + 1)
	for i := n - 1;i >= 0;i--{
		for j := 0;j <= i;j++{
			dp[j] = min(dp[j],dp[j + 1]) + triangle[i][j]
		}
	}
	return dp[0]
}

func minPathSum(grid [][]int) int {
	m := len(grid)
	n := len(grid[0])
	dp := make([]int,n + 1)
	for i,_ := range dp	{
		dp[i] = 0x3f3f3f
	}

	for i := m - 1;i >= 0;i--{
		for j := n - 1;j >= 0;j--{
			if i == m-1 && j == n-1 {
				dp[j] = grid[i][j]
			}else{
				dp[j] = min(dp[j+1],dp[j]) + grid[i][j]
			}
		}
	}
	return dp[0]
}

func uniquePaths(m int, n int) int {
	dp := make([]int,n + 1)
	for i := m - 1;i >= 0;i--{
		for j := n - 1;j >= 0;j--{
			if i == m - 1 && j == n - 1{
				dp[j] = 1
			}else{
				dp[j] += dp[j + 1]
			}
		}
	}
	return dp[0]
}

func uniquePathsWithObstacles(obstacleGrid [][]int) int {
	m := len(obstacleGrid)
	n := len(obstacleGrid[0])
	if obstacleGrid[0][0] == 1 || obstacleGrid[m-1][n-1] == 1{return 0}
	dp := make([][]int,m+1)
	for i,_ := range dp{
		dp[i] = make([]int,n+1)
	}
	dp[m-1][n-1] = 1
	for i:= m - 1;i >= 0;i--{
		for j := n-1;j >= 0;j--{
			if obstacleGrid[i][j] == 0 && i+j < m+n-2{
				dp[i][j] = dp[i+1][j] + dp[i][j+1]
			}
		}
	}
	return dp[0][0]
}

func climbStairs(n int) int {
	dp := make([]int,n)
	dp[0] = 1
	if n > 1 {
		dp[1] = 2
	}
	for i := 2;i < n;i++{
		dp[i] = dp[i-1] + dp[i-2]
	}
	return dp[n-1]
}

func minCut(s string) int {
	n := len(s)
	dp := make([]int,n + 1)
	palindrome := make([][]bool,n)
	for i,_ := range palindrome {
		palindrome[i] = make([]bool,n)
	}
	for right := 0;right < n;right++{
		for left := 0;left <= right;left++{
			if s[left] == s[right] && (right - left <= 2 || palindrome[left+1][right-1]) {
				palindrome[left][right] = true
			}
		}
	}

	for i := 1;i <= n;i++{
		mincut := i - 1
		for j := 0;j < i;j++{
			if dp[j] < mincut && palindrome[j][i-1] {
				mincut = dp[j]
			}
		}
		dp[i] = mincut + 1
	}
	return dp[n] - 1
}

func lengthOfLIS(nums []int) int {
	n := len(nums)
	if n == 0 {return 0}
	dp := make([]int,n)
	result := 1
	for i := 0;i < n;i++{
		max := 0
		for j := 0;j < i;j++{
			if nums[j] < nums[i] && max < dp[j] {
				max = dp[j]
			}
		}
		dp[i] = max + 1
		if dp[i] > result {
			result = dp[i]
		}
	}
	return result
}

func wordBreak(s string,wordDict []string) bool {
	dictmap := make(map[string]bool)
	dp := make([]bool,len(s)+1)
	for _,word := range wordDict{
		dictmap[word] = true
	}
	dp[0] = true
	for i := 1;i <= len(s);i++{
		for j:= 0;j < i;j++{
			if dp[j] && dictmap[s[j:i]]{
				dp[i] = true
				break
			}
		}
	}
	return dp[len(s)]
}

func longestCommonSubsequence(text1 string, text2 string) int {
	m,n := len(text1),len(text2)
	dp := make([][]int,m + 1)
	for i,_ := range dp	{
		dp[i] = make([]int,n + 1)
	}
	for i := 1;i <= m;i++{
		for j := 1;j <= n;j++{
			if text1[i-1] == text2[j-1] {
				dp[i][j] = dp[i-1][j-1] + 1
			}else{
				dp[i][j] = max(dp[i][j-1],dp[i-1][j])
			}
		}
	}
	return dp[m][n]
}

func minDistance(word1 string, word2 string) int {
	m,n := len(word1),len(word2)
	dp := make([][]int,m + 1)
	for i,_ := range dp	{
		dp[i] = make([]int,n + 1)
		dp[i][0] = i
	}
	for i := 1;i <= n;i++{
		dp[0][i] = i
	}
	for i := 1;i <= m;i++{
		for j := 1;j <= n;j++{
			if word1[i-1] == word2[j-1] {
				dp[i][j] = dp[i-1][j-1]
			}else{
				dp[i][j] = min(dp[i][j-1],dp[i-1][j],dp[i-1][j-1]) + 1
			}
		}
	}
	return dp[m][n]
}

func coinChange(coins []int, amount int) int {
	dp := make([]int,amount + 1)
	for i := 1;i <= amount;i++{
		minCost := 0x3f3f3f
		for _,m := range coins{
			if i - m >= 0 && dp[i-m] + 1 < minCost {
				minCost = dp[i-m] + 1
			}
		}
		dp[i] = minCost
	}
	if dp[amount] == 0x3f3f3f{
		return -1
	}else{
		return dp[amount]
	}
}
