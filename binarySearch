func search(nums []int, target int) int {
	left, right := 0,len(nums) - 1
	for left <= right {
		mid := (left + right) / 2
		if target < nums[mid]{
			right = mid - 1
		}else if target > nums[mid]{
			left = mid + 1
		}else{
			return mid
		}
	}
	return -1
}

func searchRange(nums []int, target int) []int {
	left,right := 0,len(nums)-1
	right2 := right
	for left < right {
		mid := (left + right) / 2
		if target > nums[mid]{
			left = mid + 1
		}else if target < nums[mid]{
			right = mid
			right2 = right
		}else{
			right = mid
		}
	}
	if nums[left] != target{ return []int{-1,-1}}
	result := []int{left,right2}
	for left < right2{
		mid := 1 + (left + right2) / 2
		if target < nums[mid]{
			right2 = mid - 1
		}else{
			left = mid
		}
	}
	result[1] = left
	return result
}

func searchMatrix(matrix [][]int, target int) bool {
	m := len(matrix)
	if m == 0 {return false}
	n := len(matrix[0])
	if n == 0 {return false}
	left,right := 0, m * n - 1
	for left < right{
		mid := (left + right) / 2
		if target > matrix[mid/n][mid%n]{
			left = mid + 1
		}else {
			right = mid
		}
	}
	if matrix[left/n][left%n] == target{
		return true
	}
	return false
}

func firstBadVersion(n int) int {
	left,right := 1,n
	for left < right{
		mid := (left + right) / 2
		if isBadVersion(mid){
			right = mid
		}else{
			left = mid + 1
		}
	}
	return left
}

func findMin(nums []int) int {
	left,right := 0,len(nums) - 1
	for left < right{
		mid := (left + right) / 2
		if nums[mid] < nums[right]{
			right = mid
		}else if nums[mid] >= nums[left]{
			left = mid + 1
		}
	}
	return nums[left]
}

func findMinII(nums []int) int {
	left,right := 0,len(nums) - 1
	for left < right{
		mid := (left + right) / 2
		if nums[mid] < nums[right]{
			right = mid
		}else if nums[mid] > nums[right]{
			left = mid + 1
		}else{
			right--
		}
	}
	return nums[left]
}

func searchII(nums []int, target int) int {
	left,right := 0,len(nums) - 1
	for left < right{
		mid := (left + right) / 2
		if nums[mid] < nums[right]{
			if target > nums[mid] && target <= nums[right]{
				left = mid + 1
			}else{
				right = mid
			}
		}else if nums[mid] > nums[right]{
			if target <= nums[mid] && target >= nums[left]{
				right = mid
			}else{
				left = mid + 1
			}
		}
	}
	if len(nums) == 0 || nums[left] != target{
		return -1
	}else{
		return left
	}
}

func searchIII(nums []int, target int) bool {
	left,right := 0,len(nums) - 1
	for left < right{
		mid := (left + right) / 2
		if nums[mid] < nums[right]{
			if target > nums[mid] && target <= nums[right]{
				left = mid + 1
			}else{
				right = mid
			}
		}else if nums[mid] > nums[right]{
			if target <= nums[mid] && target >= nums[left]{
				right = mid
			}else{
				left = mid + 1
			}
		}else{
			if target == nums[mid]{
				return true
			}else{
				right--
			}
		}
	}
	if len(nums) == 0 || nums[left] != target{
		return false
	}else{
		return true
	}
}

func splitArray(nums []int, m int) int {
	left,right := 0,0
	for i,_ := range nums{
		right += nums[i]
		if left < nums[i]{
			left = nums[i]
		}
	}
	for left < right {
		mid := (left + right) / 2
		if check(nums,mid,m) {
			right = mid
		}else{
			left = mid + 1
		}
	}
	return left
}

func check(nums []int,x int,m int) bool {
	sum,cnt := 0,1
	for i,_ := range nums{
		if sum + nums[i] > x{
			cnt++
			sum = nums[i]
		}else{
			sum += nums[i]
		}
	}
	return cnt <= m
}
